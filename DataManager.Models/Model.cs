using DataManager.Data;

namespace DataManager.Models
{
    /// <summary>
    /// Represents the base class for all data modeling techniques.
    /// </summary>
    /// <remarks>
    /// This abstract class provides a foundation for implementing various data models.
    /// Derived classes must implement methods for calculating the model, 
    /// evaluating its performance (e.g., R-squared and MSE), and managing datasets.
    /// </remarks>
    public abstract class Model
    {
        #region Properties

        /// <summary>
        /// Gets or sets the name of the model.
        /// </summary>
        /// <remarks>
        /// The name is used to identify the model and can be customized by derived classes.
        /// </remarks>
        public string Name { get; set; } = "Default Model";

        /// <summary>
        /// Gets or sets the description of the model.
        /// </summary>
        /// <remarks>
        /// The description provides additional information about the model's purpose or behavior.
        /// </remarks>
        public string? Description { get; set; } = null;

        /// <summary>
        /// Gets or sets the original dataset used for modeling.
        /// </summary>
        /// <remarks>
        /// This dataset contains the raw data that the model is based on.
        /// </remarks>
        public DataPoints? OriginalDataSet { get; protected set; }

        /// <summary>
        /// Gets or sets the dataset generated by the model.
        /// </summary>
        /// <remarks>
        /// This dataset contains the results of the model's calculations.
        /// </remarks>
        public DataPoints? ModelDataSet { get; protected set; }

        #endregion

        #region Abstract Methods

        /// <summary>
        /// Calculates the model based on the original dataset.
        /// </summary>
        /// <remarks>
        /// Derived classes must implement this method to perform the specific calculations
        /// required for their respective models.
        /// </remarks>
        public abstract void CalculateModel();

        /// <summary>
        /// Calculates the R-squared value (coefficient of determination) for the model.
        /// </summary>
        /// <returns>
        /// A value between 0 and 1, where higher values indicate a better fit of the model
        /// to the original data.
        /// </returns>
        public abstract double GetRSquared();

        /// <summary>
        /// Calculates the Mean Squared Error (MSE) for the model.
        /// </summary>
        /// <returns>
        /// The MSE value, which represents the average squared difference between
        /// the original and modeled values. Lower values indicate better fit.
        /// </returns>
        public abstract double GetMSE();

        #endregion

        #region Protected Methods

        /// <summary>
        /// Calculates the Mean Squared Error (MSE) between two sets of values.
        /// </summary>
        /// <param name="originalValues">The original values.</param>
        /// <param name="modelValues">The values generated by the model.</param>
        /// <returns>
        /// The MSE value, which represents the average squared difference between
        /// the original and modeled values.
        /// </returns>
        /// <exception cref="ArgumentException">
        /// Thrown when the lengths of <paramref name="originalValues"/> and <paramref name="modelValues"/> do not match.
        /// </exception>
        protected static double CalculateMSE(double[] originalValues, double[] modelValues)
        {
            if (originalValues.Length != modelValues.Length)
            {
                throw new ArgumentException("Original and model values must have the same length.");
            }

            double mse = 0;
            for (int i = 0; i < originalValues.Length; i++)
            {
                mse += Math.Pow(originalValues[i] - modelValues[i], 2);
            }
            return mse / originalValues.Length;
        }

        #endregion
    }
}

